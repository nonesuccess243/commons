package ${package};

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

<#list model.needImport as import>
import ${import.name};
</#list>

/**
 * auto generated by nbm-dbgenerator at ${.now}
 */
public class ${typeSimpleName}Example
{
        protected String orderByClause;

        protected boolean distinct;

        protected List<Criteria> oredCriteria;

        public ${typeSimpleName}Example()
        {
                oredCriteria = new ArrayList<Criteria>();
        }

        public void setOrderByClause(String orderByClause)
        {
                this.orderByClause = orderByClause;
        }

        public String getOrderByClause()
        {
                return orderByClause;
        }

        public void setDistinct(boolean distinct)
        {
                this.distinct = distinct;
        }

        public boolean isDistinct()
        {
                return distinct;
        }

        public List<Criteria> getOredCriteria()
        {
                return oredCriteria;
        }

        public void or(Criteria criteria)
        {
                oredCriteria.add(criteria);
        }

        public Criteria or()
        {
                Criteria criteria = createCriteriaInternal();
                oredCriteria.add(criteria);
                return criteria;
        }

        public Criteria createCriteria()
        {
                Criteria criteria = createCriteriaInternal();
                if (oredCriteria.size() == 0)
                {
                        oredCriteria.add(criteria);
                }
                return criteria;
        }

        protected Criteria createCriteriaInternal()
        {
                Criteria criteria = new Criteria();
                return criteria;
        }

        public void clear()
        {
                oredCriteria.clear();
                orderByClause = null;
                distinct = false;
        }

        protected abstract static class GeneratedCriteria
        {
                protected List<Criterion> criteria;

                protected GeneratedCriteria()
                {
                        super();
                        criteria = new ArrayList<Criterion>();
                }

                public boolean isValid()
                {
                        return criteria.size() > 0;
                }

                public List<Criterion> getAllCriteria()
                {
                        return criteria;
                }

                public List<Criterion> getCriteria()
                {
                        return criteria;
                }

                protected void addCriterion(String condition)
                {
                        if (condition == null)
                        {
                                throw new RuntimeException("Value for condition cannot be null");
                        }
                        criteria.add(new Criterion(condition));
                }

                protected void addCriterion(String condition, Object value, String property)
                {
                        if (value == null)
                        {
                                throw new RuntimeException("Value for " + property
                                                + " cannot be null");
                        }
                        criteria.add(new Criterion(condition, value));
                }

                protected void addCriterion(String condition,
                                Object value1,
                                Object value2,
                                String property)
                {
                        if (value1 == null || value2 == null)
                        {
                                throw new RuntimeException("Between values for " + property
                                                + " cannot be null");
                        }
                        criteria.add(new Criterion(condition, value1, value2));
                }
                
                protected void addCriterionForJDBCDate(String condition, Date value, String property)
                {
                        if (value == null)
                        {
                                throw new RuntimeException("Value for " + property
                                                + " cannot be null");
                        }

                        addCriterion(condition, new java.sql.Date(value.getTime()), property);
                }

                protected void addCriterionForJDBCDate(String condition, List<Date> values,
                                String property)
                {
                        if (values == null || values.size() == 0)
                        {
                                throw new RuntimeException("Value list for " + property
                                                + " cannot be null or empty");
                        }
                        List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
                        Iterator<Date> iter = values.iterator();

                        while (iter.hasNext())
                        {
                                dateList.add(new java.sql.Date(iter.next().getTime()));
                        }

                        addCriterion(condition, dateList, property);
                }

                protected void addCriterionForJDBCDate(String condition, Date value1, Date value2,
                                String property)
                {
                        if (value1 == null || value2 == null)
                        {
                                throw new RuntimeException("Between values for " + property
                                                + " cannot be null");
                        }

                        addCriterion(condition, new java.sql.Date(value1.getTime()),
                                        new java.sql.Date(value2.getTime()), property);
                }

				<#list fields as field>
                public Criteria and${field.nameFirstLetterUpper}IsNull()
                {
                        addCriterion("${field.dbName} is null");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}IsNotNull()
                {
                        addCriterion("${field.dbName} is not null");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}EqualTo(${field.boxingType.simpleName} value)
                {
                        addCriterion("${field.dbName} =", value, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}NotEqualTo(${field.boxingType.simpleName} value)
                {
                        addCriterion("${field.dbName} <>", value, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}GreaterThan(${field.boxingType.simpleName} value)
                {
                        addCriterion("${field.dbName} >", value, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}GreaterThanOrEqualTo(${field.boxingType.simpleName} value)
                {
                        addCriterion("${field.dbName} >=", value, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}LessThan(${field.boxingType.simpleName} value)
                {
                        addCriterion("${field.dbName} <", value, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}LessThanOrEqualTo(${field.boxingType.simpleName} value)
                {
                        addCriterion("${field.dbName} <=", value, "${field.name}");
                        return (Criteria) this;
                }
                
                <#if field.boxingType.simpleName == "String">
                public Criteria and${field.nameFirstLetterUpper}Like(${field.boxingType.simpleName} value) 
                {
                        addCriterion("${field.dbName} like", value, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}NotLike(${field.boxingType.simpleName} value)
                {
                        addCriterion("${field.dbName} not like", value, "${field.name}");
                        return (Criteria) this;
                }
                </#if>

                public Criteria and${field.nameFirstLetterUpper}In(List<${field.boxingType.simpleName}> values)
                {
                        addCriterion("${field.dbName} in", values, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}NotIn(List<${field.boxingType.simpleName}> values)
                {
                        addCriterion("${field.dbName} not in", values, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}Between(${field.boxingType.simpleName} value1, ${field.boxingType.simpleName} value2)
                {
                        addCriterion("${field.dbName} between", value1, value2, "${field.name}");
                        return (Criteria) this;
                }

                public Criteria and${field.nameFirstLetterUpper}NotBetween(${field.boxingType.simpleName} value1, ${field.boxingType.simpleName} value2)
                {
                        addCriterion("${field.dbName} not between", value1, value2, "${field.name}");
                        return (Criteria) this;
                }
				</#list>
        }

        /**
         * This class was generated by MyBatis Generator. This class corresponds
         * to the database table MESSAGE
         *
         * @mbggenerated do_not_delete_during_merge Tue Jan 07 14:51:59 CST 2014
         */
        public static class Criteria extends GeneratedCriteria
        {

                protected Criteria()
                {
                        super();
                }
        }

        /**
         * This class was generated by MyBatis Generator. This class corresponds
         * to the database table MESSAGE
         *
         * @mbggenerated Tue Jan 07 14:51:59 CST 2014
         */
        public static class Criterion
        {
                private String condition;

                private Object value;

                private Object secondValue;

                private boolean noValue;

                private boolean singleValue;

                private boolean betweenValue;

                private boolean listValue;

                private String typeHandler;

                public String getCondition()
                {
                        return condition;
                }

                public Object getValue()
                {
                        return value;
                }

                public Object getSecondValue()
                {
                        return secondValue;
                }

                public boolean isNoValue()
                {
                        return noValue;
                }

                public boolean isSingleValue()
                {
                        return singleValue;
                }

                public boolean isBetweenValue()
                {
                        return betweenValue;
                }

                public boolean isListValue()
                {
                        return listValue;
                }

                public String getTypeHandler()
                {
                        return typeHandler;
                }

                protected Criterion(String condition)
                {
                        super();
                        this.condition = condition;
                        this.typeHandler = null;
                        this.noValue = true;
                }

                protected Criterion(String condition, Object value, String typeHandler)
                {
                        super();
                        this.condition = condition;
                        this.value = value;
                        this.typeHandler = typeHandler;
                        if (value instanceof List<?>)
                        {
                                this.listValue = true;
                        } else
                        {
                                this.singleValue = true;
                        }
                }

                protected Criterion(String condition, Object value)
                {
                        this(condition, value, null);
                }

                protected Criterion(String condition, Object value, Object secondValue,
                                String typeHandler)
                {
                        super();
                        this.condition = condition;
                        this.value = value;
                        this.secondValue = secondValue;
                        this.typeHandler = typeHandler;
                        this.betweenValue = true;
                }

                protected Criterion(String condition, Object value, Object secondValue)
                {
                        this(condition, value, secondValue, null);
                }
        }
}